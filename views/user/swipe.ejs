<%- include ('../partials/header.ejs') %>
<div id="main">
    <ion-icon id="dislike" name="heart-dislike"></ion-icon>
    <div id="swiper">
    </div>
    <ion-icon id="like" name="heart"></ion-icon>
</div>

<script>
    const users = JSON.parse('<%- JSON.stringify(users) %>');

    class Card {
    constructor({ imageUrl, fullname, onDismiss, onLike, onDislike }) {
        this.imageUrl = imageUrl;
        this.fullname = fullname;
        this.onDismiss = onDismiss;
        this.onLike = onLike;
        this.onDislike = onDislike;
        this.#init();
    }

    // private properties
    #startPoint;
    #offsetX;
    #offsetY;

    #isTouchDevice = () => {
        return (
        "ontouchstart" in window ||
        navigator.maxTouchPoints > 0 ||
        navigator.msMaxTouchPoints > 0
        );
    };

    #init = () => {
        const card = document.createElement("div");
        card.classList.add("card");
        const img = document.createElement("img");
        img.src = this.imageUrl;
        card.append(img);
        this.element = card;
        if (this.#isTouchDevice()) {
        this.#listenToTouchEvents();
        } else {
        this.#listenToMouseEvents();
        }
    };

    #listenToTouchEvents = () => {
        this.element.addEventListener("touchstart", (e) => {
        const touch = e.changedTouches[0];
        if (!touch) return;
        const { clientX, clientY } = touch;
        this.#startPoint = { x: clientX, y: clientY };
        document.addEventListener("touchmove", this.#handleTouchMove);
        this.element.style.transition = "transform 0s";
        });

        document.addEventListener("touchend", this.#handleTouchEnd);
        document.addEventListener("cancel", this.#handleTouchEnd);
    };

    #listenToMouseEvents = () => {
        this.element.addEventListener("mousedown", (e) => {
        const { clientX, clientY } = e;
        this.#startPoint = { x: clientX, y: clientY };
        document.addEventListener("mousemove", this.#handleMouseMove);
        this.element.style.transition = "transform 0s";
        });

        document.addEventListener("mouseup", this.#handleMoveUp);

        // prevent card from being dragged
        this.element.addEventListener("dragstart", (e) => {
        e.preventDefault();
        });
    };

    #handleMove = (x, y) => {
        this.#offsetX = x - this.#startPoint.x;
        this.#offsetY = y - this.#startPoint.y;
        const rotate = this.#offsetX * 0.1;
        this.element.style.transform = `translate(${this.#offsetX}px, ${
        this.#offsetY
        }px) rotate(${rotate}deg)`;
        // dismiss card
        if (Math.abs(this.#offsetX) > this.element.clientWidth * 0.7) {
        this.#dismiss(this.#offsetX > 0 ? 1 : -1);
        }
    };

    // mouse event handlers
    #handleMouseMove = (e) => {
        e.preventDefault();
        if (!this.#startPoint) return;
        const { clientX, clientY } = e;
        this.#handleMove(clientX, clientY);
    };

    #handleMoveUp = () => {
        this.#startPoint = null;
        document.removeEventListener("mousemove", this.#handleMouseMove);
        this.element.style.transform = "";
    };

    // touch event handlers
    #handleTouchMove = (e) => {
        if (!this.#startPoint) return;
        const touch = e.changedTouches[0];
        if (!touch) return;
        const { clientX, clientY } = touch;
        this.#handleMove(clientX, clientY);
    };

    #handleTouchEnd = () => {
        this.#startPoint = null;
        document.removeEventListener("touchmove", this.#handleTouchMove);
        this.element.style.transform = "";
    };

    #dismiss = (direction) => {
        this.#startPoint = null;
        document.removeEventListener("mouseup", this.#handleMoveUp);
        document.removeEventListener("mousemove", this.#handleMouseMove);
        document.removeEventListener("touchend", this.#handleTouchEnd);
        document.removeEventListener("touchmove", this.#handleTouchMove);
        this.element.style.transition = "transform 1s";
        this.element.style.transform = `translate(${
        direction * window.innerWidth
        }px, ${this.#offsetY}px) rotate(${90 * direction}deg)`;
        this.element.classList.add("dismissing");
        setTimeout(() => {
        this.element.remove();
        }, 1000);
        if (typeof this.onDismiss === "function") {
        this.onDismiss();
        }
        if (typeof this.onLike === "function" && direction === 1) {
        this.onLike();
        }
        if (typeof this.onDislike === "function" && direction === -1) {
        this.onDislike();
        }
    };
    }

    const swiper = document.querySelector("#swiper");
    const like = document.querySelector("#like");
    const dislike = document.querySelector("#dislike");

    // variables
    let cardCount = 0;

    function appendNewCard() {
    const card = new Card({
        imageUrl:
        "https://ggsc.s3.amazonaws.com/images/uploads/The_Science-Backed_Benefits_of_Being_a_Dog_Owner.jpg",
        fullname: users[cardCount % 5],
        onDismiss: appendNewCard,
        onLike: () => {
        like.style.animationPlayState = "running";
        like.classList.toggle("trigger");
        },
        onDislike: () => {
        dislike.style.animationPlayState = "running";
        dislike.classList.toggle("trigger");
        },
    });
    swiper.append(card.element);
    cardCount++;

    const cards = swiper.querySelectorAll(".card:not(.dismissing)");
    cards.forEach((card, index) => {
        card.style.setProperty("--i", index);
    });
    }

    // first 5 cards
    for (let i = 0; i < 5; i++) {
    console.log("HI!");
    appendNewCard();
    }
</script>

<script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
<script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>
<%- include ('../partials/footer.ejs') %>